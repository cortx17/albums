{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSearchWord","x","setState","searchWord","target","value","getInfo","api_url","concat","state","fetch","then","res","json","results","catch","error","console","getAlbumInfo","id","clickedArtistId","artistId","artistResults","isSearching","albumArt","artworkUrl60","backToSearch","_this2","listMatches","map","artist","react_default","a","createElement","onClick","artistName","listAlbums","album","collectionId","className","src","alt","collectionName","shift","type","onChange","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8cdb1e44.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: [],\n      artistResults: [],\n      searchWord: \"\",\n      isSearching: true,\n      clickedArtistId: null,\n      albumArt: \"\"\n    };\n  }\n\n  setSearchWord = x => {\n    this.setState({ searchWord: x.target.value });\n  };\n\n  getInfo = () => {\n    const api_url = `https://cors-anywhere.herokuapp.com/https://itunes.apple.com/search?term=${\n      this.state.searchWord\n    }&entity=musicArtist&media=music`;\n    fetch(api_url)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({ results: json.results });\n      })\n      .catch(error => console.error(error));\n  };\n\n  getAlbumInfo = res => {\n    const api_url = `https://cors-anywhere.herokuapp.com/https://itunes.apple.com/lookup?id=${\n      res.target.id\n    }&entity=album`;\n    fetch(api_url)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          clickedArtistId: json.results.artistId,\n          artistResults: json.results,\n          isSearching: false,\n          albumArt: json.results.artworkUrl60\n        });\n      });\n  };\n\n  backToSearch = () => {\n    this.setState({ isSearching: true });\n  };\n\n  render() {\n    const listMatches = this.state.results.map(artist => (\n      <li id={artist.artistId} onClick={this.getAlbumInfo}>\n        {artist.artistName}\n      </li>\n    ));\n\n    const listAlbums = this.state.artistResults.map(album => (\n      <li id={album.collectionId}>\n        <div>\n          <div className=\"columns\">\n            <div className=\"album\">\n              <figure className=\"image is-64x64\">\n                <img src={album.artworkUrl60} alt=\"\" />\n              </figure>\n            </div>\n            <div className=\"column\">\n              <p>{album.collectionName}</p>\n            </div>\n          </div>\n        </div>\n      </li>\n    ));\n    listAlbums.shift();\n\n    if (this.state.isSearching) {\n      return (\n        <div className=\"App\">\n          <div className=\"box is-primary\">\n            <form>\n              <div className=\"field\">\n                <p className=\"control has-icons-left has-icons-right\">\n                  <input\n                    className=\"input is-medium is-primary is-rounded\"\n                    type=\"text\"\n                    onChange={this.setSearchWord}\n                    placeholder=\"Search artist...\"\n                  />\n                  <span className=\"icon is-small is-left\">\n                    <i className=\"fas fa-search\" />\n                  </span>\n                </p>\n              </div>\n              {/* <a onClick={this.getInfo} className=\"button is-primary\" href=\"#x\">Search</a> */}\n              <button onClick={this.getInfo} type=\"submit\">\n                Search\n              </button>\n            </form>\n            <ul>{listMatches}</ul>\n          </div>\n        </div>\n      );\n    } else if (this.state.isSearching === false) {\n      return (\n        <div className=\"App\">\n          <div className=\"box\">\n            {/* <a onClick={this.backToSearch} className=\"button is-primary\" href=\"#y\">Back</a> */}\n            <button onClick={this.backToSearch}>Back</button>\n            <ul>{listAlbums}</ul>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}