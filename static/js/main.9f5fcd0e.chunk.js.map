{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setSearchWord","x","setState","searchWord","target","value","getInfo","api_url","concat","state","window","alert","document","getElementById","classList","add","fetch","then","res","json","results","remove","length","catch","error","console","getAlbumInfo","id","artistResults","isSearching","albumArt","artworkUrl60","backToSearch","_this2","listMatches","map","artist","react_default","a","createElement","className","artistId","onClick","artistName","listAlbums","album","collectionId","class","src","alt","collectionName","shift","type","onChange","placeholder","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiKeA,qBA5Jb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAWRQ,cAAgB,SAAAC,GACdR,EAAKS,SAAS,CAAEC,WAAYF,EAAEG,OAAOC,SAbpBZ,EAiBnBa,QAAU,WACR,IAAMC,EAAO,4EAAAC,OAA+Ef,EAAKgB,MAAMN,WAA1F,mCACiB,KAA1BV,EAAKgB,MAAMN,WACbO,OAAOC,MAAM,kCAEbC,SAASC,eAAe,aAAaC,UAAUC,IAAI,cACnDC,MAAMT,GACHU,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJ1B,EAAKS,SAAS,CAAEkB,QAASD,EAAKC,UAC9BR,SAASC,eAAe,aAAaC,UAAUO,OAAO,cACpB,IAA9B5B,EAAKgB,MAAMW,QAAQE,QACrBZ,OAAOC,MAAM,mBAGhBY,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,OAhCjB/B,EAqCnBiC,aAAe,SAAAR,GACb,IAAMX,EAAO,0EAAAC,OAA6EU,EAAId,OAAOuB,GAAxF,iBACbf,SAASC,eAAe,aAAaC,UAAUC,IAAI,cACnDC,MAAMT,GACHU,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACwB,IAAxBA,EAAKC,QAAQE,QACfZ,OAAOC,MAAM,kDACbC,SAASC,eAAe,aAAaC,UAAUO,OAAO,eAEtD5B,EAAKS,SAAS,CACZ0B,cAAeT,EAAKC,QACpBS,aAAa,EACbC,SAAUX,EAAKC,QAAQW,kBAlDdtC,EA0DnBuC,aAAe,WACbvC,EAAKS,SAAS,CAAE2B,aAAa,KAzD7BpC,EAAKgB,MAAQ,CACXW,QAAS,GACTQ,cAAe,GACfzB,WAAY,GACZ0B,aAAa,EACbC,SAAU,IAPKrC,wEAiEV,IAAAwC,EAAArC,KAEDsC,EAActC,KAAKa,MAAMW,QAAQe,IAAI,SAAAC,GAAM,OAC/CC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAab,GAAIS,EAAOK,SAAUC,QAAST,EAAKP,cAC3DU,EAAOO,cAKNC,EAAahD,KAAKa,MAAMmB,cAAcO,IAAI,SAAAU,GAAK,OACnDR,EAAAC,EAAAC,cAAA,MAAIZ,GAAIkB,EAAMC,cAEZT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,eAEEF,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,WAETV,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,yBACTV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYQ,IAAKH,EAAMd,aAAckB,IAAI,mBAK9DZ,EAAAC,EAAAC,cAAA,OAAKQ,MAAM,UACTV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,IAAIK,EAAMK,yBAkBvC,OALAN,EAAWO,QAKPvD,KAAKa,MAAMoB,YAGXQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,SACEC,UAAU,wCACVY,KAAK,OACLC,SAAUzD,KAAKI,cACfsD,YAAY,qBAEdjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAMnBH,EAAAC,EAAAC,cAAA,UAAQZ,GAAG,YAAYa,UAAU,oBAAoBE,QAAS9C,KAAKU,QAAS8C,KAAK,UAAjF,UACAf,EAAAC,EAAAC,cAAA,UAAKL,MAOyB,IAA3BtC,KAAKa,MAAMoB,YAElBQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBE,QAAS9C,KAAKoC,aAAcoB,KAAK,UAAtE,SAEFf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAb,aAA0C5C,KAAKa,MAAMmB,cAAc,GAAGe,WAAtE,KACAN,EAAAC,EAAAC,cAAA,UAAKK,UARN,SA7IOW,cCQEC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASlD,SAASC,eAAe,SD2H3C,kBAAmBkD,WACrBA,UAAUC,cAAcC,MAAMhD,KAAK,SAAAiD,GACjCA,EAAaC","file":"static/js/main.9f5fcd0e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: [],\n      artistResults: [],\n      searchWord: \"\",\n      isSearching: true,\n      albumArt: \"\"\n    };\n  }\n\n\n  setSearchWord = x => {\n    this.setState({ searchWord: x.target.value });\n  };\n\n\n  getInfo = () => {\n    const api_url = `https://cors-anywhere.herokuapp.com/https://itunes.apple.com/search?term=${this.state.searchWord}&entity=musicArtist&media=music`;\n    if (this.state.searchWord === \"\") {\n      window.alert(\"Please specify a search term.\");\n    } else {\n      document.getElementById(\"btnSearch\").classList.add(\"is-loading\");\n      fetch(api_url)\n        .then(res => res.json())\n        .then(json => {\n          this.setState({ results: json.results });\n          document.getElementById(\"btnSearch\").classList.remove(\"is-loading\");\n          if (this.state.results.length === 0) {\n            window.alert(\"No match! :-(\")\n          };\n        })\n        .catch(error => console.error(error));\n    }\n  };\n\n\n  getAlbumInfo = res => {\n    const api_url = `https://cors-anywhere.herokuapp.com/https://itunes.apple.com/lookup?id=${res.target.id}&entity=album`;\n    document.getElementById(\"btnSearch\").classList.add(\"is-loading\");\n    fetch(api_url)\n      .then(res => res.json())\n      .then(json => {\n        if (json.results.length === 1) {\n          window.alert(\"There are no albums available for this artist.\");\n          document.getElementById(\"btnSearch\").classList.remove(\"is-loading\");\n        } else {\n          this.setState({\n            artistResults: json.results,\n            isSearching: false,\n            albumArt: json.results.artworkUrl60\n          });\n        }\n      }\n      );\n  };\n\n\n  backToSearch = () => {\n    this.setState({ isSearching: true });\n  };\n\n\n\n\n  render() {\n\n    const listMatches = this.state.results.map(artist => (\n      <li className=\"lstArtists\" id={artist.artistId} onClick={this.getAlbumInfo}>\n        {artist.artistName}\n      </li>\n    ));\n\n\n    const listAlbums = this.state.artistResults.map(album => (\n      <li id={album.collectionId}>\n\n        <div className=\"box\">\n          <article>\n\n            <div class=\"columns\">\n\n              <div class=\"column is-one-quarter\">\n                <div className=\"media-content\">\n                  <figure className=\"image is-64x64\">\n                    <img className=\"img-cover\" src={album.artworkUrl60} alt=\"album cover\" />\n                  </figure>\n                </div>\n              </div>\n\n              <div class=\"column\">\n                <div className=\"media-content\">\n                  <div className=\"content\">\n                    <p className=\"\">{album.collectionName}</p>\n                  </div>\n                </div>\n              </div>\n\n            </div>\n\n          </article>\n        </div>\n\n      </li>\n\n    ));\n    listAlbums.shift();\n\n\n\n\n    if (this.state.isSearching) {\n      return (\n\n        <div className=\"App\">\n          <div className=\"box is-primary\">\n\n            <div className=\"field\">\n              <p className=\"control has-icons-left has-icons-right\">\n                <input\n                  className=\"input is-medium is-primary is-rounded\"\n                  type=\"text\"\n                  onChange={this.setSearchWord}\n                  placeholder=\"Search artist...\"\n                />\n                <span className=\"icon is-small is-left\">\n                  <i className=\"fas fa-search\" />\n                </span>\n              </p>\n            </div>\n\n\n            <button id=\"btnSearch\" className=\"button is-primary\" onClick={this.getInfo} type=\"button\">Search</button>\n            <ul>{listMatches}</ul>\n\n\n          </div>\n        </div >\n      );\n\n    } else if (this.state.isSearching === false) {\n      return (\n        <div className=\"App\">\n          <div className=\"box\">\n            <div className=\"control\">\n              <button className=\"button is-danger\" onClick={this.backToSearch} type=\"button\">Back</button>\n            </div>\n            <p className=\"txt-artist-name\">Albums of {this.state.artistResults[0].artistName}:</p>\n            <ul>{listAlbums}</ul>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}